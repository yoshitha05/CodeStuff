# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def mergeKLists(self, lists: List[Optional[ListNode]]) -> Optional[ListNode]:
        heap = []
        
        # Initialize the heap with the head of each linked list
        for i, node in enumerate(lists):
            if node:
                heapq.heappush(heap, (node.val, i, node))
        
        # Dummy node to build the merged list
        dummy = ListNode(0)
        current = dummy
        
        # Merge all lists
        while heap:
            val, idx, node = heapq.heappop(heap)  # Get the smallest node
            current.next = node  # Add the node to the result list
            current = current.next  # Move the pointer forward
            
            # If there's another node in the same list, push it into the heap
            if node.next:
                heapq.heappush(heap, (node.next.val, idx, node.next))
        
        return dummy.next
